#BlueJ class context
comment0.target=List
comment0.text=\r\n\ <p>Materialien\ zu\ den\ zentralen\r\n\ Abiturpruefungen\ im\ Fach\ Informatik\ ab\ 2012\ in\ \r\n\ Nordrhein-Westfalen.</p>\r\n\ <p>Klasse\ List</p>\r\n\ <p>Objekte\ der\ Klasse\ List\ verwalten\ beliebig\ viele,\ \r\n\ linear\ angeordnete\ Objekte.\ Auf\ hoechstens\ ein\ Listenobjekt,\ \r\n\ aktuelles\ Objekt\ genannt,\ kann\ jeweils\ zugegriffen\ werden.\ \r\n\ Wenn\ eine\ Liste\ leer\ ist,\ vollstaendig\ durchlaufen\ wurde\ oder\ \r\n\ das\ aktuelle\ Objekt\ am\ Ende\ der\ Liste\ geloescht\ wurde,\ gibt\ es\ \r\n\ kein\ aktuelles\ Objekt.\ Das\ erste\ oder\ das\ letzte\ Objekt\ einer\ \r\n\ Liste\ koennen\ durch\ einen\ Auftrag\ zum\ aktuellen\ Objekt\ gemacht\ werden.\ \r\n\ Auerdem\ kann\ das\ dem\ aktuellen\ Objekt\ folgende\ Listenobjekt\ \r\n\ zum\ neuen\ aktuellen\ Objekt\ werden.\ Das\ aktuelle\ Objekt\ kann\ gelesen,\ \r\n\ veraendert\ oder\ geloescht\ werden.\ Ausserdem\ kann\ vor\ dem\ aktuellen\ \r\n\ Objekt\ ein\ Listenobjekt\ eingefgt\ werden.\r\n</p>\r\n\ \r\n\ <p>NW-Arbeitsgruppe\:\ Materialentwicklung\ zum\ Zentralabitur\ \r\n\ im\ Fach\ Informatik</p>\r\n\ \r\n\ @version\ 2011-01-05\r\n
comment1.params=
comment1.target=List()
comment1.text=\r\n\ Eine\ leere\ Liste\ wird\ erzeugt.\r\n
comment10.params=pObject
comment10.target=void\ insert(java.lang.Object)
comment10.text=\r\nFalls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true),\r\nwird\ ein\ neues\ Objekt\ vor\ dem\ aktuellen\ Objekt\ in\ die\ \r\nListe\ eingefuegt.\ Das\ aktuelle\ Objekt\ bleibt\ unveraendert.\ \r\nWenn\ die\ Liste\ leer\ ist,\ wird\ pObject\ in\ die\ Liste\ eingefuegt\r\nund\ es\ gibt\ weiterhin\ kein\ aktuelles\ Objekt\ \r\n(hasAccess()\ \=\=\ false).\ Falls\ es\ kein\ aktuelles\ Objekt\ gibt\ \r\n(hasAccess()\ \=\=\ false)\ und\ die\ Liste\ nicht\ leer\ ist\ oder\ \r\npObject\ gleich\ null\ ist,\ bleibt\ die\ Liste\ unveraendert.\r\n@param\ pObject\ Inhaltsobjekt\r\n
comment11.params=pList
comment11.target=void\ concat(List)
comment11.text=\r\n\ Die\ Liste\ pList\ wird\ an\ die\ Liste\ angehaengt.\ Anschliessend\ \r\n\ wird\ pList\ eine\ leere\ Liste.\ Das\ aktuelle\ Objekt\ bleibt\ unveraendert.\ \r\n\ Falls\ pList\ null\ oder\ eine\ leere\ Liste\ ist,\ bleibt\ die\ Liste\ \r\n\ unveraendert.\r\n\ @param\ pList\ Liste\r\n
comment12.params=
comment12.target=void\ remove()
comment12.text=\r\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true),\r\n\ wird\ das\ aktuelle\ Objekt\ geloescht\ und\ das\ Objekt\ hinter\ \r\n\ dem\ gelaeschten\ Objekt\ wird\ zum\ aktuellen\ Objekt.\ Wird\ das\ \r\n\ Objekt,\ das\ am\ Ende\ der\ Liste\ steht,\ geloescht,\ gibt\ es\ kein\ \r\n\ aktuelles\ Objekt\ mehr\ (hasAccess()\ \=\=\ false).\ Wenn\ die\ Liste\ \r\n\ leer\ ist\ oder\ es\ kein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ false),\r\n\ bleibt\ die\ Liste\ unveraendert.\r\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\r\n\ Die\ Anfrage\ liefert\ den\ Wert\ true,\ wenn\ die\ Liste\ \r\n\ keine\ Objekte\ enthaelt,\ sonst\ liefert\ sie\ den\ Wert\ false.\r\n\ @return\ true,\ wenn\ die\ Liste\ leer\ ist,\ sonst\ false\r\n
comment3.params=
comment3.target=boolean\ hasAccess()
comment3.text=\r\n\ Die\ Anfrage\ liefert\ den\ Wert\ true,\ wenn\ es\ ein\r\n\ aktuelles\ Objekt\ gibt,\ sonst\ \r\n\ liefert\ sie\ den\ Wert\ false.\r\n\ @return\ true,\ falls\ Zugriff\ moeglich,\ sonst\ false\r\n
comment4.params=
comment4.target=void\ next()
comment4.text=\r\n\ Falls\ die\ Liste\ nicht\ leer\ ist,\ es\ ein\ aktuelles\ \r\n\ Objekt\ gibt\ und\ dieses\ nicht\ das\ letzte\ Objekt\ der\ \r\n\ Liste\ ist,\ wird\ das\ dem\ aktuellen\ Objekt\ in\ der\ Liste\ \r\n\ folgende\ Objekt\ zum\ aktuellen\ Objekt,\ andernfalls\ gibt\ \r\n\ es\ nach\ Ausf\u00EF\u00BF\u00BDhrung\ des\ Auftrags\ kein\ aktuelles\ Objekt,\ \r\n\ d.h.\ hasAccess()\ liefert\ den\ Wert\ false.\r\n
comment5.params=
comment5.target=void\ toFirst()
comment5.text=\r\n\ Falls\ die\ Liste\ nicht\ leer\ ist,\ wird\ das\ erste\ \r\n\ Objekt\ der\ Liste\ aktuelles\ Objekt.\ \r\n\ Ist\ die\ Liste\ leer,\ geschieht\ nichts.\r\n
comment6.params=
comment6.target=void\ toLast()
comment6.text=\r\n\ Falls\ die\ Liste\ nicht\ leer\ ist,\ wird\ das\ \r\n\ letzte\ Objekt\ der\ Liste\ aktuelles\ Objekt.\ \r\n\ Ist\ die\ Liste\ leer,\ geschieht\ nichts.\r\n
comment7.params=
comment7.target=java.lang.Object\ getObject()
comment7.text=\r\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ \r\n\ (hasAccess()\ \=\=\ true),\ wird\ das\ aktuelle\ Objekt\ \r\n\ zurueckgegeben,\ andernfalls\ (hasAccess()\=\=\ false)\ \r\n\ gibt\ die\ Anfrage\ den\ Wert\ null\ zurueck.\r\n\ @return\ Inhaltsobjekt\r\n
comment8.params=pObject
comment8.target=void\ setObject(java.lang.Object)
comment8.text=\r\n\ Falls\ es\ ein\ aktuelles\ Objekt\ gibt\ (hasAccess()\ \=\=\ true)\r\n\ und\ pObject\ ungleich\ null\ ist,\ wird\ das\ aktuelle\ Objekt\ \r\n\ durch\ pObject\ ersetzt.\ Sonst\ bleibt\ die\ Liste\ unveraendert.\r\n\ @param\ pObject\ Inhaltsobjekt\r\n
comment9.params=pObject
comment9.target=void\ append(java.lang.Object)
comment9.text=\r\n\ Ein\ neues\ Objekt\ pObject\ wird\ am\ Ende\ der\ Liste\ eingefuegt.\ \r\n\ Das\ aktuelle\ Objekt\ bleibt\ unveraendert.\ Wenn\ die\ Liste\ \r\n\ leer\ ist,\ wird\ das\ Objekt\ pObject\ in\ die\ Liste\ eingefuegt\ \r\n\ und\ es\ gibt\ weiterhin\ kein\ aktuelles\ Objekt\ \r\n\ (hasAccess()\ \=\=\ false).\ Falls\ pObject\ gleich\ null\ ist,\ \r\n\ bleibt\ die\ Liste\ unveraendert.\ \r\n@param\ pObject\ Inhaltsobject\r\n
numComments=13
